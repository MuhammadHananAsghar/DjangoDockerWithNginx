services:
  db:
    image: postgres:18-alpine
    container_name: sunset_postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-sunset_db}
      POSTGRES_USER: ${DB_USER:-sunset_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sunset_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-sunset_user} -d ${DB_NAME:-sunset_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sunset_network

  redis:
    image: redis:7-alpine
    container_name: sunset_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sunset_network

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sunset_web
    restart: always
    command: >
      sh -c "
        python manage.py migrate_schemas --shared &&
        python manage.py init_public_tenant &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DEBUG=True
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-sunset_db}
      - DB_USER=${DB_USER:-sunset_user}
      - DB_PASSWORD=${DB_PASSWORD:-sunset_password}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_REFRESH_SECRET_KEY=${JWT_REFRESH_SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    env_file:
      - .env
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app # Bind mount for hot reload in development
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - sunset_network

  nginx:
    image: nginx:alpine
    container_name: sunset_nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - web
    networks:
      - sunset_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  sunset_network:
    driver: bridge
 
